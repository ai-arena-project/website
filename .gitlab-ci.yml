---
image: git-registry.m1nd.io/m1nd/molecule-dind:latest

.before_script_template: &check_docker_login
  before_script:
    - echo -n $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY

stages:
  - test
  - build
  - push
  - deploy

Sonarqube Scanner:
  stage: test
  image:
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: [""]
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"
    GIT_DEPTH: "0"
    DEBUG: "True"
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script:
    - sonar-scanner
  allow_failure: true
  only:
    - main

Build Container:
  stage: build
  <<: *check_docker_login
  script:
    - docker pull $CI_REGISTRY_IMAGE:latest || true
    - >
      docker build
      --pull
      --cache-from $CI_REGISTRY_IMAGE:latest
      --label "org.opencontainers.image.title=$CI_PROJECT_TITLE"
      --label "org.opencontainers.image.url=$CI_PROJECT_URL"
      --label "org.opencontainers.image.created=$CI_JOB_STARTED_AT"
      --label "org.opencontainers.image.revision=$CI_COMMIT_SHA"
      --label "org.opencontainers.image.version=$CI_COMMIT_REF_NAME"
      --tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
      .
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA

# tag the "main" branch as "latest"
Push latest container:
  variables:
    GIT_STRATEGY: none
  stage: push
  <<: *check_docker_login
  only:
    - main
  script:
    - docker pull $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
    - docker tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE:latest
    - docker push $CI_REGISTRY_IMAGE:latest
  needs:
    - "Build Container"

Deploy DEV:
  stage: deploy
  image: node:16.16.0
  only:
    - main
  script:
    - npm install --global vercel
    - vercel pull --yes --environment=preview --token=$VERCEL_TOKEN
    - vercel build --token=$VERCEL_TOKEN
    - vercel deploy --prebuilt --token=$VERCEL_TOKEN

Deploy PROD:
  stage: deploy
  image: node:16.16.0
  only:
    - main
  script:
    - npm install --global vercel
    - vercel pull --yes -environment=production --token=$VERCEL_TOKEN
    - vercel build -prod --token=$VERCEL_TOKEN
    - vercel deploy --prebuilt -prod --token=$VERCEL_TOKEN
  when: manual
